name: CI/CD for Kittygram

on:
  push:
    branches:
      - main

jobs:
  backend_tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt
      - name: Test with flake8
        run: flake8 backend/
      - name: Run backend tests
        run: pytest backend/

  build_and_push_backend:
    name: Build and Push Backend Docker Image
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Backend Docker Image
        run: |
          docker build -t mikhaillll/taski_backend:latest ./backend/
          docker push mikhaillll/taski_backend:latest

  frontend_tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Install frontend dependencies
        run: |
          cd frontend/
          npm install
      - name: Test frontend
        run: |
          cd frontend/
          npm test

  build_and_push_frontend:
    name: Build and Push Frontend Docker Image
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Frontend Docker Image
        run: |
          cd frontend/
          docker build -t mikhaillll/taski_frontend:latest .
          docker push mikhaillll/taski_frontend:latest

  build_and_push_gateway:
    name: Build and Push Gateway Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Gateway Docker Image
        run: |
          docker build -t mikhaillll/taski_gateway:latest ./gateway/
          docker push mikhaillll/taski_gateway:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend
      - build_and_push_frontend
      - build_and_push_gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Copy docker-compose.production.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "taski"
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd taski
            sudo docker-compose -f docker-compose.production.yml pull
            sudo docker-compose -f docker-compose.production.yml down
            sudo docker-compose -f docker-compose.production.yml up -d
            sudo docker-compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker-compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker-compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  notify_success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Деплой успешно выполнен!
