name: CI/CD for Kittygram

on:
  push:
    branches:
      - main

jobs:
  backend_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]  # Добавьте нужные версии Python

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install flake8
      run: python -m pip install flake8==5.0.4

    - name: Install dependencies
      run: |
        cd backend/
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend tests
      run: |
        python -m flake8 backend/
        python backend/manage.py test

  frontend_tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18
      - name: Install frontend dependencies
        run: |
          cd frontend/
          npm install
      - name: Test frontend
        run: |
          cd frontend/
          npm test
  publish_docker_images:
    name: Publish Docker Images to Docker Hub
    runs-on: ubuntu-latest
    needs:
      - backend_tests
      - frontend_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Publish Backend Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          push: true
          tags: mikhaillll/kittygram_backend:latest

      - name: Build and Publish Frontend Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend/
          push: true
          tags: mikhaillll/kittygram_frontend:latest

      - name: Build and Publish Nginx Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./nginx/
          push: true
          tags: mikhaillll/kittygram_gateway:latest
 
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs:
      - publish_docker_images
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Copy docker-compose.production.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "kittygram"
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd kittygram
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  send_message:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Deployment successful!"
